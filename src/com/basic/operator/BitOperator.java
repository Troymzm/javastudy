package com.basic.operator;

/*
 * 1. 二进制的最高位是符号位 0表示正数 1表示负数
 * 2. 正数的原码 反码 补码 相同
 * 3. 负数的反码 = 原码符号位不变 其他位取反
 * 4. 负数的补码 = 反码 + 1
 * 5. 0 的反码和补码都是0
 * 6. java中所有的数都有符号
 * 7. 计算机以补码的方式进行运算
 * 8. 当我们查看运算结果时 应该查看其原码
 */
public class BitOperator {
    public static void main(String[] args) {
        // 位运算

        // 按位与 &
        // 2 & 3 按位与
        // 2 = 00000000 00000000 00000000 00000010 补码同
        // 3 = 00000000 00000000 00000000 00000011 补码同
        // 2 & 3 = 00000000 00000000 00000000 00000010 => 2(补码对应的原码)
        System.out.println(2 & 3);

        // 按位取反 ~
        // ~-2
        // -2 = 10000000 00000000 00000000 00000010 -- 原码
        // 反码 = 11111111 11111111 11111111 11111101
        // 补码 = 反码 + 1 = 11111111 11111111 11111111 11111110
        // 按位取反 = 00000000 00000000 00000000 00000001 => 1(补码对应的原码)
        System.out.println(~-2);
        // ~2
        // 2 = 00000000 00000000 00000000 00000010 -- 原码
        // 补码 = 原码 = 00000000 00000000 00000000 00000010
        // 按位取反 = 11111111 11111111 11111111 11111101 -- 补码
        // 反码等于补码 - 1 = 11111111 11111111 11111111 11111100
        // 原码 = 符号位不变 其他位取反 = 10000000 00000000 00000000 00000011
        System.out.println(~2);

        // 位运算符号
        /*
         * 1. 算数右移 >> 低位溢出 符号位不变 并用符号位补溢出的高位
         * 2. 算数左移 << 符号位不变 低位补0
         * 3. 逻辑右移 / 无符号右移 >>> 低位溢出 高位补0
         * 4. 没有<<<符号
         */

        // 1 >> 2
        // 1 原码 和 补码 均为 00000000 00000000 00000000 00000001
        // 算数右移结果为 00000000 00000000 00000000 00000000 => 0
        System.out.println(1 >> 2); // 1 / 2 ^ 2

        // 1 << 2
        // 1 原码 和 补码 均为 00000000 00000000 00000000 00000001
        // 算数左移结果为 00000000 00000000 00000000 00000100 => 4
        System.out.println(1 << 2); // 1 * 2 ^ 2

        // 4 << 3
        // 4 原码 和 补码 均为 00000000 00000000 00000000 00000100
        // 算数左移结果为 00000000 00000000 00000000 00100000 => 32
        System.out.println(4 << 3); // // 4 * 2 ^ 3

        // 15 >> 2
        // 15 原码 和 补码 均为 00000000 00000000 00000000 00001111
        // 算数右移结果为 00000000 00000000 00000000 00000011 => 4
        System.out.println(15 >> 2); // // 15 / 2 ^ 2
    }
}
